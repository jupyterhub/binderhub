{{- if .Values.imageCleaner.enabled -}}
{{- $builderName := .Values.imageBuilderType -}}
{{- $builder := index .Values $builderName -}}

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: {{ .Release.Name }}-image-cleaner
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name:  {{ .Release.Name }}-image-cleaner
  template:
    metadata:
      labels:
        name: {{ .Release.Name }}-image-cleaner
        app: binder
        component: image-cleaner
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      {{- if .Values.jupyterhub.enabled }}
      {{- with include "jupyterhub.imagePullSecrets" (dict "root" . "image" .Values.imageCleaner.image) }}
      imagePullSecrets: {{ . }}
      {{- end }}
      {{- end }}
      tolerations:
      - effect: NoSchedule
        key: hub.jupyter.org/dedicated
        operator: Equal
        value: user
      - effect: NoSchedule
        key: hub.jupyter.org_dedicated
        operator: Equal
        value: user
      nodeSelector: {{ .Values.config.BinderHub.build_node_selector | toJson }}
      {{- if .Values.rbac.enabled }}
      serviceAccountName: {{ .Release.Name }}-image-cleaner
      {{- end }}
      containers:
      - name: image-cleaner-{{ $builderName }}
        image: {{ .Values.imageCleaner.image.name }}:{{ .Values.imageCleaner.image.tag }}
        {{- with .Values.imageCleaner.image.pullPolicy }}
        imagePullPolicy: {{ . }}
        {{- end }}
        volumeMounts:
        - name: storage-{{ $builderName }}
          mountPath: /var/lib/{{ $builderName }}
        - name: socket-{{ $builderName }}
          mountPath: /var/run/docker.sock
        env:
        - name: DOCKER_IMAGE_CLEANER_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: DOCKER_IMAGE_CLEANER_PATH_TO_CHECK
          value: /var/lib/{{ $builderName }}
        - name: DOCKER_IMAGE_CLEANER_DELAY_SECONDS
          value: {{ .Values.imageCleaner.delay | quote }}
        - name: DOCKER_IMAGE_CLEANER_THRESHOLD_TYPE
          value: {{ .Values.imageCleaner.imageGCThresholdType | quote }}
        - name: DOCKER_IMAGE_CLEANER_THRESHOLD_HIGH
          value: {{ .Values.imageCleaner.imageGCThresholdHigh | quote }}
        - name: DOCKER_IMAGE_CLEANER_THRESHOLD_LOW
          value: {{ .Values.imageCleaner.imageGCThresholdLow | quote }}
      terminationGracePeriodSeconds: 0
      volumes:
      {{- if eq $builderName "host" }}
      - name: storage-host
        hostPath:
          path: {{ .Values.imageCleaner.host.dockerLibDir }}
      - name: socket-host
        hostPath:
          path: {{ .Values.imageCleaner.host.dockerSocket }}
          type: Socket
      {{- end }}
      {{- if or (eq $builderName "dind") (eq $builderName "pink") }}
      - name: storage-{{ $builderName }}
        hostPath:
          path: {{ eq $builderName "dind" | ternary $builder.hostLibDir $builder.hostStorageDir }}
          type: DirectoryOrCreate
      - name: socket-{{ $builderName }}
        hostPath:
          path: {{ $builder.hostSocketDir }}/{{ $builder.hostSocketName }}
          type: Socket
      {{- end }}
{{- end }}
