debug:
  enabled: false

resources:
  requests:
    cpu: 0.2
    memory: 512Mi

rbac:
  enabled: true

retries:
  count: 4
  delay: 4

baseUrl: /
nodeSelector: {}

image:
  name: jupyterhub/k8s-binderhub
  tag: local

build:
  repo2dockerImage: jupyter/repo2docker:687788f
  nodeSelector: {}
  appendix:
  logTailLines: 100

perRepoQuota: 100

googleAnalyticsCode:
googleAnalyticsDomain:

registry:
  enabled: false
  prefix: binderhub-local/
  host: https://gcr.io
  authHost:
  authTokenUrl: https://gcr.io/v2/token?service=gcr.io
  username: _json_key
  password:

service:
  type: LoadBalancer
  labels: {}
  annotations:
    prometheus.io/scrape: 'true'
  nodePort:

github:
  hostname:
  # either id + secret...
  clientId:
  clientSecret:
  # ...or access_token
  accessToken:

gitlab:
  hostname:
  accessToken:
  privateToken:

extraConfig: {}

# have to set cors.allowOrigin twice:
# once in top-level cors.allowOrigin,
# and again in jupyterhub.hub.extraConfigMap.cors.allowOrigin

# Using YAML anchors, `&cors` for the first appearance and `*cors` for subsequent
# appearances, allows us to remove redundancy in this (BinderHub) `values.yaml`.
# The anchors do not extend beyond this file.
# As such, users must set `cors` separately for their own user `values.yaml` for notebooks.
# `cors` will be set separately in the user `values.yaml` and binderhub`values.yaml`.
# The same anchor pattern (`&cors`, `*cors`) can be used in the user `values.yaml`.

cors: &cors
  allowOrigin:

hub:
  url:

jupyterhub:
  cull:
    enabled: true
    # NOTE set false when authentication is enabled
    users: true
  hub:
    rbac:
      enabled: true
    extraConfig:
      binder: |
        import os
        import sys
        import yaml
        from tornado import web
        def get_config_map(key, default=None):
            """
            Find a configmap item of a given name & return it

            Parses everything as YAML, so lists and dicts are available too
            """
            path = os.path.join('/etc/jupyterhub/config', key)
            try:
                with open(path) as f:
                    return yaml.safe_load(f)
            except FileNotFoundError:
                return default

        # get cors config from config-map
        cors = get_config_map('custom.cors', {})

        # image & token are set via spawn options
        from kubespawner import KubeSpawner

        class BinderSpawner(KubeSpawner):
          def get_args(self):
              args = [
                  '--ip=0.0.0.0',
                  '--port=%i' % self.port,
                  '--NotebookApp.base_url=%s' % self.server.base_url,
                  '--NotebookApp.token=%s' % self.user_options['token'],
                  '--NotebookApp.trust_xheaders=True',
              ]
              allow_origin = cors.get('allowOrigin')
              if allow_origin:
                  args.append('--NotebookApp.allow_origin=' + allow_origin)
              return args + self.args

          def start(self):
              if 'token' not in self.user_options:
                raise web.HTTPError(400, "token required")
              if 'image' not in self.user_options:
                raise web.HTTPError(400, "image required")

              self.image_spec = self.user_options['image']
              return super().start()

        # NOTE use modified BinderSpawner when authentication is enabled
        c.JupyterHub.spawner_class = BinderSpawner
        # NOTE set True when authentication is enabled
        c.JupyterHub.allow_named_servers = False

    extraConfigMap:
      cors: *cors
    services:
      binder:
        # NOTE set 'url' when authentication is enabled.
        # because cookie 'jupyterhub-services', which is used for authentication, is available under '/services/'.
        # NOTE set oauth_client_id for oauth
        # oauth_redirect_uri is '/base_url/oauth_callback' by default
        # apiToken is used as the client_secret for oauth requests
        admin: true
        apiToken:
  auth:
    type: custom
    custom:
      # disable login (users created exclusively via API)
      className: "nullauthenticator.NullAuthenticator"
  singleuser:
    # NOTE set cmd as jupyterhub-singleuser when authentication is enabled
    # nullauthenticator doesn't work with jhub-singleuser and jhub installation is required in single user image
    # start jupyter notebook
    cmd: jupyter-notebook
    events: false
    storage:
      type: none
    memory:
      guarantee:
  prePuller:
    hook:
      enabled: false

deployment:
  labels: {}

dind:
  enabled: false
  initContainers: []
  daemonset:
    image:
      name: docker
      tag: 17.11.0-ce-dind
  storageDriver: overlay2
  resources: {}
  hostSocketDir: /var/run/dind
  hostLibDir: /var/lib/dind

imageCleaner:
  enabled: true
  image:
    name: jupyterhub/k8s-image-cleaner
    tag: local
    repository: jupyterhub/k8s-image-cleaner
  # delete an image at most every 5 seconds
  delay: 5
  # when 80% of inodes are used,
  # cull images until it drops below 60%
  imageGCThresholdHigh: 80
  imageGCThresholdLow: 60
  # cull images on the host docker as well as dind
  host:
    enabled: true
    dockerSocket: /var/run/docker.sock
    dockerLibDir: /var/lib/docker

ingress:
  enabled: false
  hosts:
    - chart-example.local
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  tls: {}
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

template:
  variables: {}
  path:
  # to use extra static files in templates.
  # they are looked up after binder base static files.
  static:
    path:
    urlPrefix: extra_static/

initContainers: []
extraVolumes: []
extraVolumeMounts: []
