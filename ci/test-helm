#!/bin/bash
# test helm deployment
# - build and install helm chart
# - run tests marked with 'remote'

set -ex

export IP=$(ifconfig eth0 | grep 'inet addr' | cut -d: -f2 | awk '{print $1}')
export BINDER_TEST_URL=http://$IP:30901
export HUB_URL=http://$IP:30902
echo -e "hub:\n  url: $HUB_URL" > helm-chart/travis-binder.yaml
if [[ ! -z "$GITHUB_ACCESS_TOKEN" ]]; then
  echo -e "github:\n  accessToken: '$GITHUB_ACCESS_TOKEN'" >> helm-chart/travis-binder.yaml
fi

echo "building helm chart"
cd helm-chart
chartpress --commit-range ${TRAVIS_COMMIT_RANGE} --extra-message "${TRAVIS_REPO_SLUG}$(git log -1 --pretty=%B | head -n1 | sed 's/^.*\(#[0-9]*\).*/\1/')"
cd ..
git diff
docker images | sort

# smoke test helm install
echo "installing binderhub helm chart"

helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
helm dependency update helm-chart/binderhub
cat helm-chart/travis-binder.yaml

helm install \
  --name binder-test \
  --namespace binder-test-helm \
  helm-chart/binderhub \
  -f helm-chart/minikube-binder.yaml \
  -f helm-chart/travis-binder.yaml

# wait for helm deploy to come up
echo "waiting for pods to become ready"
kubectl --namespace=$BINDER_TEST_NAMESPACE get deployment -o name | xargs -L1 kubectl --namespace=$BINDER_TEST_NAMESPACE rollout status --watch

echo "waiting for servers to become responsive"
until curl --fail $BINDER_TEST_URL > /dev/null; do
  sleep 1
done
until curl --fail $HUB_URL> /dev/null; do
  sleep 1
done

echo "running tests against $BINDER_TEST_URL"
# run a few tests again, this time against the helm-installed binder
sleep 10
export ASYNC_TEST_TIMEOUT=15
pytest -vsx -m remote
helm delete --purge binder-test
